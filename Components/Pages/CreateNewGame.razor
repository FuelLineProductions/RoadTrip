@page "/CreateNewGame"
@using Microsoft.AspNetCore.SignalR.Client
@using RoadTrip.RoadTripDb.Database.Models
@using RoadTrip.Components.QuizComponents
@using RoadTrip.RoadTripServices.RoadTripServices.Services
@using RoadTrip.ViewModels
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<RoadTripUser> UserManager
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@* <MudOverlay Visible="Loading" DarkBackground=true Absolute=true>
    <MudProgressCircular Indeterminate=true>Loading...</MudProgressCircular>
</MudOverlay> *@
<AuthorizeView>
    <Authorized>
        <MudContainer Style="width=95%;">
            @if (!StartGame)
            {
                <MudCard>
                    <MudSelect @bind-Value="SelectedQuiz" Label="Select a quiz" Placeholder="Select" Text="Select">
                        @foreach (var quiz in MyQuizzes)
                        {
                            <MudSelectItem Value="@quiz">@quiz.Title</MudSelectItem>
                        }
                    </MudSelect>
                    @if (SelectedQuiz.Id != Guid.Empty)
                    {
                        <QuizFullView Quiz="SelectedQuiz" ShowAnswers="false" ShowQuestions="false" ShowVehicles="false"></QuizFullView>
                    }
                    <MudButton OnClick="SetQuiz">Activate Quiz</MudButton>
                </MudCard>
                @if (SelectedQuiz.Active)
                {
                    <MudText Typo="Typo.h4">@SelectedQuiz.Title is now active, guests can join</MudText>
                    <MudCard>
                        <MudText Typo="Typo.h4">Requested entry</MudText>
                        <MudTable Items="GuestRequests" Context="guestRequest">
                            <HeaderContent>
                                <MudTh>Primary Name</MudTh>
                                <MudTh>Surname</MudTh>
                                <MudTh>Display Name</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@guestRequest.PrimaryName</MudTd>
                                    <MudTd>@guestRequest.Surname</MudTd>
                                    <MudTd>@guestRequest.DisplayName</MudTd>
                                    <MudTd><MudButton OnClick="@(() => AddGuestToAllowed(guestRequest))">Allow To Play</MudButton></MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCard>
                    <MudCard>
                        <MudText Typo="Typo.h4">Allowed Guests</MudText>
                        <MudTable Items="AllowedGuests" Context="allowedGuest">
                            <HeaderContent>
                                <MudTh>Primary Name</MudTh>
                                <MudTh>Surname</MudTh>
                                <MudTh>Display Name</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@allowedGuest.PrimaryName</MudTd>
                                    <MudTd>@allowedGuest.Surname</MudTd>
                                    <MudTd>@allowedGuest.DisplayName</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCard>
                    <MudButton OnClick="StartNewGame">Start New Game</MudButton>
                }
                else if (!string.IsNullOrWhiteSpace(SelectedQuiz.Title))
                {

                    <MudText Typo="Typo.h4">@SelectedQuiz.Title is inactive</MudText>
                }
            }
        </MudContainer>
        <MudContainer>
            @if (StartGame)
            {
                <MudText>Active Game Session for quiz @SelectedQuiz.Title</MudText>
                <MudButton OnClick="ManualRefresh">Manual Refresh</MudButton>
            }

        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudText>Please sign in</MudText>
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<Quiz> MyQuizzes { get; set; } = new();
    private Quiz SelectedQuiz { get; set; } = new() { Id = Guid.Empty };
    private List<GuestAppUser> AllowedGuests { get; set; } = new List<GuestAppUser>();
    private List<GuestAppUser> GuestRequests { get; set; } = new();
    private IEnumerable<ActiveQuizProgressViewModel>? InitializedProgresses { get; set; }
    private HubConnection? HubConnection;
    private bool Loading { get; set; }
    private RoadTripUser? CurrentUser { get; set; }
    private bool StartGame { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        await InvokeAsync(StateHasChanged);

        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var userClaim = authState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        if (user == null)
            return;

        if (!string.IsNullOrWhiteSpace(user.Email))
            await UserManager.AddClaimAsync(user, new Claim(ClaimTypes.Email, user.Email));


        await UserManager.RemoveAuthenticationTokenAsync(user, "RoadTripWeb", "RoadTripAccessToken");
        await UserManager.SetAuthenticationTokenAsync(user, "RoadTripWeb", "RoadTripAccessToken", "QuizHubAccess");
        var token = await UserManager.GetAuthenticationTokenAsync(user, "RoadTripWeb", "RoadTripAccessToken");

        HubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/QuizHub"), options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(token);
        })
        .Build();

        await HubConnection.StartAsync();


        HubConnection.On<List<Quiz>>("AllQuizzesForOwner", async quizzes =>
        {
            Loading = false;
            MyQuizzes = quizzes;
            await InvokeAsync(StateHasChanged);
        });

        HubConnection.On<IEnumerable<ActiveQuizProgressViewModel>>("InitializedQuizzes", async initializedProgresses =>
        {
            if (InitializedProgresses != null && InitializedProgresses.Any(x => x.QuizStarted.HasValue) && !InitializedProgresses.Any(x => x.QuizEnded.HasValue))
            {
                StartGame = true;
            }
            await InvokeAsync(StateHasChanged);
        });

        HubConnection.On<Quiz>("ActivatedQuiz", async quiz =>
        {
            SelectedQuiz = quiz;
            await InvokeAsync(StateHasChanged);
        });

        HubConnection.On<GuestRequestJoinQuiz, GuestAppUser>("NewGuests", async (guestRequestedToJoin, guestAppUser) =>
        {
            if (guestRequestedToJoin.QuizId.Equals(SelectedQuiz.Id))
            {
                GuestRequests.Add(guestAppUser);
            }

            await InvokeAsync(StateHasChanged);
        });

        await HubConnection.InvokeAsync("GetAllQuizzesForOwner", user.RoadTripId);
    }

    private async Task AddGuestToAllowed(GuestAppUser guestAppUser)
    {
        // TODO: Invoke a service to check the total allow guests in this room for this owner
        // Then add this person to the
        AllowedGuests.Add(guestAppUser);
        GuestRequests.Remove(guestAppUser);
        // TODO: Remove/ Expire from GuestRequestJoinQuiz table
        await InvokeAsync(StateHasChanged);
    }

    private async Task SetQuiz()
    {
        if (HubConnection != null)
            await HubConnection.InvokeAsync("ActivateQuiz", SelectedQuiz);
    }

    private async Task StartNewGame()
    {
        // Some work to start the quiz
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        var userClaim = authState.User;
        if (userClaim != null && userClaim.Identity != null)
            HubConnection?.SendAsync("SetInitialQuizProgress", SelectedQuiz, userClaim.Identity.Name, AllowedGuests.AsEnumerable(), true);
    }

    private async Task OpenHostViewDialog()
    {
        if (InitializedProgresses == null)
        {
            Snackbar.Add("Not yet started the game, please start the game");
            return;
        }
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.False };
        var parameters = new DialogParameters<QuizHostViewDialog>();
        parameters.Add("ActiveQuizHostView", InitializedProgresses);
        DialogService.Show<QuizFullViewDialog>();
    }

    private async Task ManualRefresh()
    {
        // TODO trigger a refresh
    }
}