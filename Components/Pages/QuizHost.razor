@page "/MyQuizzes"
@using RoadTrip.RoadTripDb.Database.Models
@using RoadTrip.RoadTripServices.RoadTripServices.Services
@using RoadTrip.Components.QuizComponents
@using RoadTrip.RoadTripDb.Repos
@using Microsoft.Identity.Client
@using Microsoft.AspNetCore.SignalR.Client

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<RoadTripUser> UserManager
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService

<MudOverlay Visible="Loading" DarkBackground=true Absolute=true>
    <MudProgressCircular Indeterminate=true>Loading...</MudProgressCircular>
</MudOverlay>
<AuthorizeView>
    <Authorized>
        <MudContainer>
            <MudText Typo="Typo.h3">Your Quizzes</MudText>
            <MudButton OnClick="Check" Variant="Variant.Outlined" Color="Color.Tertiary">Refresh</MudButton>
            @if (MyQuizzes.Any() && !Loading)
            {
                <MudTable Items="MyQuizzes" Context="quiz">
                    <HeaderContent>
                        <MudTd>Title</MudTd>
                        <MudTd>Description</MudTd>
                        <MudTd>Details</MudTd>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@quiz.Title</MudTd>
                            <MudTd>@quiz.Description</MudTd>
                            <MudTd>
                                <MudButton OnClick="(() => OpenPreviewDialogAsync(quiz))" Variant="Variant.Filled" Color="Color.Info">See More</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
            }
            else
            {
                <MudText>Looks like you haven't made any quizzes yet</MudText>
            }
            <MudButton OnClick="(() => OpenAddNewDialogAsync())" Color="Color.Info" Variant="Variant.Filled">Add new quiz</MudButton>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h3">Please login to view your quizzes</MudText>
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<Quiz> MyQuizzes { get; set; } = new();
    private List<Vehicle> Vehicles { get; set; } = new();
    private HubConnection? HubConnection;
    private bool Loading { get; set; }
    private bool HostCanAdd { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Loading = true;
        await InvokeAsync(StateHasChanged);

        HubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/QuizHub"))
        .Build();

        await HubConnection.StartAsync();

        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var userClaim = authState.User;

        HubConnection.On<List<Quiz>>("AllQuizzesForOwner", async quizzes =>
        {
            Loading = false;
            MyQuizzes = quizzes;
            await InvokeAsync(StateHasChanged);
        });

        var user = await UserManager.GetUserAsync(userClaim);
        if (user != null)
        {
            await HubConnection.InvokeAsync("GetAllQuizzesForOwner", user.RoadTripId);
        }

        HubConnection.On<bool>("CanHostAddNewQuizIndividualResult", async canAdd =>
        {
            if (!canAdd)
            {
                Snackbar.Add("Sorry you can't add more quizzes on your current sub", Severity.Error);
            }
            HostCanAdd = canAdd;
            await InvokeAsync(StateHasChanged);
        });

        HubConnection.On<List<Vehicle>>("AllVehicles", async vehicles =>
                 {
                     Vehicles = vehicles;
                     await InvokeAsync(StateHasChanged);
                 });
        await HubConnection.InvokeAsync("GetAllVehicles");
        await AddNewQuiz();
    }

    private async Task Check()
    {
        var authState = await AuthenticationStateProvider
        .GetAuthenticationStateAsync();
        var userClaim = authState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        if (user != null && HubConnection != null)
            await HubConnection.InvokeAsync("GetAllQuizzesForOwner", user.RoadTripId);
    }

    private async Task AddNewQuiz()
    {
        await Check();
        var authState = await AuthenticationStateProvider
        .GetAuthenticationStateAsync();
        var userClaim = authState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        if (user != null && HubConnection != null)
            await HubConnection.InvokeAsync("CanHostAddNewQuizIndividual", user.RoadTripId);

        await InvokeAsync(StateHasChanged);
    }


    private async Task OpenPreviewDialogAsync(Quiz? quiz)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.False };
        var parameters = new DialogParameters<QuizFullViewDialog>();
        parameters.Add("Quiz", quiz);
        parameters.Add("ShowAnswers", true);
        parameters.Add("ShowQuestions", true);
        parameters.Add("ShowVehicles", true);
        DialogService.Show<QuizFullViewDialog>("Preview Quiz", parameters, options);
    }

    private async Task OpenAddNewDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.False };
        var parameters = new DialogParameters<QuizMakerDialog>();
        parameters.Add("HostCanAdd", HostCanAdd);
        parameters.Add("Vehicles", Vehicles);
        DialogService.Show<QuizMakerDialog>("Add New Quiz", parameters, options);
    }

}
