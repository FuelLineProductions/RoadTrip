@page "/MyQuizzes"
@using RoadTrip.RoadTripDb.Database.Models
@using RoadTrip.RoadTripServices.RoadTripServices.Services
@using RoadTrip.Components.QuizComponents
@using RoadTrip.RoadTripDb.Repos
@using Microsoft.Identity.Client
@using Microsoft.AspNetCore.SignalR.Client

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<RoadTripUser> UserManager
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h3">Your Quizzes</MudText>
        <MudButton OnClick="Check" Variant="Variant.Outlined" Color="Color.Tertiary">Refresh</MudButton>
        @if (MyQuizzes.Any())
        {
            <MudTable Items="MyQuizzes" Context="quiz">
                <HeaderContent>
                    <MudTd>Title</MudTd>
                    <MudTd>Description</MudTd>
                    <MudTd>Details</MudTd>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@quiz.Title</MudTd>
                        <MudTd>@quiz.Description</MudTd>
                        <MudTd><MudButton>See More</MudButton></MudTd>
                    </RowTemplate>
                </MudTable>
        }
        else
        {
            <MudText>Looks like you haven't made any quizzes yet</MudText>
        }

        <MudButton OnClick="AddNewQuiz" Color="Color.Info" Variant="Variant.Filled">Add new quiz</MudButton>
        @if (MakeNew)
        {
            <QuizMaker HostCanAdd="MakeNew" Vehicles="Vehicles"></QuizMaker>
        }
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h3">Please login to view your quizzes</MudText>
    </NotAuthorized>
</AuthorizeView>


@code {
    private bool MakeNew { get; set; }
    private List<Quiz> MyQuizzes { get; set; } = new();
    private List<Vehicle> Vehicles { get; set; } = new();
    private HubConnection? HubConnection;

    protected override async Task OnInitializedAsync()
    {
        HubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/QuizHub"))
        .Build();

        await HubConnection.StartAsync();

        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var userClaim = authState.User;

        HubConnection.On<List<Quiz>>("AllQuizzesForOwner", async quizzes =>
        {
            MyQuizzes = quizzes;
           await  InvokeAsync(StateHasChanged);
        });

        var user = await UserManager.GetUserAsync(userClaim);
        if (user != null)
        {
            await HubConnection.InvokeAsync("GetAllQuizzesForOwner", user.RoadTripId);
        }

        HubConnection.On<bool>("CanHostAddNewQuizIndividualResult", async canAdd =>
       {
           await CanAddCheck(canAdd);
           await InvokeAsync(StateHasChanged); ;
       });

        HubConnection.On<List<Vehicle>>("AllVehicles", async vehicles =>
                {
                    Vehicles = vehicles;
                    await InvokeAsync(StateHasChanged);
                });
        await HubConnection.InvokeAsync("GetAllVehicles");
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     var authState = await AuthenticationStateProvider
    //         .GetAuthenticationStateAsync();
    //     var userClaim = authState.User;
    //     var user = await UserManager.GetUserAsync(userClaim);
    //     if (user != null)
    //         await HubConnection.InvokeAsync("GetAllQuizzesForOwner", user.RoadTripId);
    // }

    private async Task Check()
    {
        var authState = await AuthenticationStateProvider
        .GetAuthenticationStateAsync();
        var userClaim = authState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        if (user != null)
            await HubConnection.InvokeAsync("GetAllQuizzesForOwner", user.RoadTripId);
    }

    private async Task AddNewQuiz()
    {
        await Check();
        var authState = await AuthenticationStateProvider
        .GetAuthenticationStateAsync();
        var userClaim = authState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        var canAdd = HubConnection.InvokeAsync("CanHostAddNewQuizIndividual", user.RoadTripId);

        await InvokeAsync(StateHasChanged);
    }

    private async Task CanAddCheck(bool canAdd)
    {
        if (!canAdd)
        {
            Snackbar.Add("Sorry you can't add more quizzes on your current sub", Severity.Error);
        }

        MakeNew = canAdd;

        await InvokeAsync(StateHasChanged);
    }

}
