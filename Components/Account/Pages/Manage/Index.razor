@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using RoadTrip.Data
@using RoadTrip.RoadTripDb.Repos

@inject UserManager<RoadTripUser> UserManager
@inject SignInManager<RoadTripUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IHostAppUserRepo HostAppUserRepo

<PageTitle>Profile</PageTitle>

<MudContainer Style="width=75%">
    <h3>Profile</h3>
    <StatusMessage />

    <div class="row">
        <div class="col-md-6">
            <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PrimaryName" class="form-control" autocomplete="primaryname" aria-required="true" placeholder="Primary Name"></InputText>
                    <label for="primaryname">Primary Name</label>
                    <ValidationMessage For="() => Input.PrimaryName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Surname" class="form-control" autocomplete="surname" aria-required="true" placeholder="Surname"></InputText>
                    <label for="surname">Surname</label>
                    <ValidationMessage For="() => Input.Surname" class="text-danger" />
                </div> <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.DisplayName" class="form-control" autocomplete="displayname" aria-required="true" placeholder="Display Name"></InputText>
                    <label for="displayname">Display Name</label>
                    <ValidationMessage For="() => Input.DisplayName" class="text-danger" />
                </div>
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                    <label for="username" class="form-label">Username</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                    <label for="phone-number" class="form-label">Phone number</label>
                    <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
</MudContainer>
@code {
    private RoadTripUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string? primaryName;
    private string? surname;
    private string? displayName;


    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        primaryName = user.PrimaryName;
        surname = user.Surname;
        displayName = user.DisplayName;

        Input.PhoneNumber ??= phoneNumber;
        Input.DisplayName = user.DisplayName;
        Input.Surname = user.Surname;
        Input.PrimaryName = user.PrimaryName;
    }

    private async Task OnValidSubmitAsync()
    {

        var currentUser = await HostAppUserRepo.GetHostAppUser(user.RoadTripId);
        if (currentUser == null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to find user", HttpContext);
        }

        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        if (Input.Surname != surname)
        {
            user.Surname = Input.Surname;
            var setSurnameResult = await UserManager.UpdateAsync(user);
            if (!setSurnameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set surname.", HttpContext);
            }
            currentUser.Surname = Input.Surname;
            await HostAppUserRepo.UpdateAsync(currentUser);
        }

        if (Input.PrimaryName != primaryName)
        {
            user.PrimaryName = Input.PrimaryName;
            var setPrimaryNameResult = await UserManager.UpdateAsync(user);
            if (!setPrimaryNameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set primary name.", HttpContext);
            }
            currentUser.PrimaryName = Input.PrimaryName;
            await HostAppUserRepo.UpdateAsync(currentUser);
        }

        if (Input.DisplayName != displayName)
        {
            user.DisplayName = Input.DisplayName;
            var setDisplayNameResult = await UserManager.UpdateAsync(user);
            if (!setDisplayNameResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set display name.", HttpContext);
            }
            currentUser.DisplayName = Input.DisplayName;
            await HostAppUserRepo.UpdateAsync(currentUser);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Primary Name")]
        public string PrimaryName { get; set; }

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Surname")]
        public string Surname { get; set; }

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Display Name")]
        public string DisplayName { get; set; }
    }
}
